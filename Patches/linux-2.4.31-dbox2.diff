diff -Naur linux-2.4.31/Makefile linux-2.4.31-dbox2/Makefile
--- linux-2.4.31/Makefile	2005-06-01 02:56:56.000000000 +0200
+++ linux-2.4.31-dbox2/Makefile	2005-06-03 11:02:31.000000000 +0200
@@ -1,7 +1,7 @@
 VERSION = 2
 PATCHLEVEL = 4
 SUBLEVEL = 31
-EXTRAVERSION =
+EXTRAVERSION = -dbox2
 
 KERNELRELEASE=$(VERSION).$(PATCHLEVEL).$(SUBLEVEL)$(EXTRAVERSION)
 
diff -Naur linux-2.4.31/arch/ppc/8xx_io/enet.c linux-2.4.31-dbox2/arch/ppc/8xx_io/enet.c
--- linux-2.4.31/arch/ppc/8xx_io/enet.c	2003-11-28 19:26:19.000000000 +0100
+++ linux-2.4.31-dbox2/arch/ppc/8xx_io/enet.c	2005-06-03 11:02:05.000000000 +0200
@@ -14,13 +14,6 @@
  * Buffer descriptors are kept in the CPM dual port RAM, and the frame
  * buffers are in the host memory.
  *
- * Right now, I am very watseful with the buffers.  I allocate memory
- * pages and then divide them into 2K frame buffers.  This way I know I
- * have buffers large enough to hold one frame within one buffer descriptor.
- * Once I get this working, I will use 64 or 128 byte CPM buffers, which
- * will be much more memory efficient and will easily handle lots of
- * small packets.
- *
  */
 #include <linux/config.h>
 #include <linux/kernel.h>
@@ -56,11 +49,7 @@
  *
  * The buffer descriptors are allocated from the CPM dual port memory
  * with the data buffers allocated from host memory, just like all other
- * serial communication protocols.  The host memory buffers are allocated
- * from the free page pool, and then divided into smaller receive and
- * transmit buffers.  The size of the buffers should be a power of two,
- * since that nicely divides the page.  This creates a ring buffer
- * structure similar to the LANCE and other controllers.
+ * serial communication protocols.
  *
  * Like the LANCE driver:
  * The driver runs as two independent, single-threaded flows of control.  One
@@ -92,20 +81,14 @@
  * pool.  The code may assume these are power of two, so it is best
  * to keep them that size.
  * We don't need to allocate pages for the transmitter.  We just use
- * the skbuffer directly.
+ * the skbuffer directly. Receiving data works by swapping skbuffers.
  */
 #ifdef CONFIG_ENET_BIG_BUFFERS
-#define CPM_ENET_RX_PAGES	32
-#define CPM_ENET_RX_FRSIZE	2048
-#define CPM_ENET_RX_FRPPG	(PAGE_SIZE / CPM_ENET_RX_FRSIZE)
-#define RX_RING_SIZE		(CPM_ENET_RX_FRPPG * CPM_ENET_RX_PAGES)
+#define RX_RING_SIZE		64
 #define TX_RING_SIZE		64	/* Must be power of two */
 #define TX_RING_MOD_MASK	63	/*   for this to work */
 #else
-#define CPM_ENET_RX_PAGES	4
-#define CPM_ENET_RX_FRSIZE	2048
-#define CPM_ENET_RX_FRPPG	(PAGE_SIZE / CPM_ENET_RX_FRSIZE)
-#define RX_RING_SIZE		(CPM_ENET_RX_FRPPG * CPM_ENET_RX_PAGES)
+#define RX_RING_SIZE		8
 #define TX_RING_SIZE		8	/* Must be power of two */
 #define TX_RING_MOD_MASK	7	/*   for this to work */
 #endif
@@ -129,6 +112,8 @@
 	struct	sk_buff* tx_skbuff[TX_RING_SIZE];
 	ushort	skb_cur;
 	ushort	skb_dirty;
+	struct	sk_buff* rx_skbuff[RX_RING_SIZE];
+	ushort	skb_cur_rx;
 
 	/* CPM dual port RAM relative addresses.
 	*/
@@ -141,7 +126,6 @@
 	/* Virtual addresses for the receive buffers because we can't
 	 * do a __va() on them anymore.
 	 */
-	unsigned char *rx_vaddr[RX_RING_SIZE];
 	struct	net_device_stats stats;
 	uint	tx_free;
 	spinlock_t lock;
@@ -207,7 +191,7 @@
 		/* Ooops.  All transmit buffers are full.  Bail out.
 		 * This should not happen, since the tx queue should be stopped.
 		 */
-		printk("%s: tx queue full!.\n", dev->name);
+		printk(KERN_ERR "%s: tx queue full!.\n", dev->name);
 		return 1;
 	}
 #endif
@@ -267,29 +251,133 @@
 	return 0;
 }
 
+/*
+ * Transmits up to 3 memory locations. This 3 locations must be cache-flushed
+ * before this function is invoked. The memory won't be freed after
+ * transmission. The function takes physical addresses!
+ */
+
+int scc_enet_multiple_xmit(struct net_device *dev,unsigned count, unsigned first,
+	unsigned first_len, unsigned second, unsigned second_len, unsigned third,
+	unsigned third_len)
+{
+	struct scc_enet_private *cep = (struct scc_enet_private *)dev->priv;
+	volatile cbd_t	*bdp,*first_bdp;
+	unsigned pad = 0;
+
+	/* nothing to send ? */
+	if (!count)
+		return 0;
+
+	spin_lock_irq(&cep->lock);
+
+	/* not enough free descriptors? */
+	if (cep->tx_free < count)
+	{
+		spin_unlock_irq(&cep->lock);
+		return 1;
+	}
+
+	bdp = cep->cur_tx;
+	first_bdp = bdp;
+
+	if (first_len + second_len + third_len < ETH_ZLEN)
+	{
+		pad = BD_ENET_TX_PAD;
+	}
+
+	/* setup first descriptor */
+
+	cep->tx_skbuff[cep->skb_cur] = NULL;
+	bdp->cbd_datlen = first_len;
+	bdp->cbd_bufaddr = first;
+	cep->tx_free--;
+	cep->skb_cur = (cep->skb_cur + 1) & TX_RING_MOD_MASK;
+
+	/* setup second descriptor */
+	if (count > 1)
+	{
+		if (bdp->cbd_sc & BD_ENET_TX_WRAP)
+		{
+			bdp = cep->tx_bd_base;
+		}
+		else
+		{
+			bdp++;
+		}
+		cep->tx_skbuff[cep->skb_cur] = NULL;
+		bdp->cbd_datlen = second_len;
+		bdp->cbd_bufaddr = second;
+		cep->tx_free--;
+		cep->skb_cur = (cep->skb_cur + 1) & TX_RING_MOD_MASK;
+
+		if (count > 2)
+		{
+			bdp->cbd_sc = (bdp->cbd_sc & BD_ENET_TX_WRAP) | BD_ENET_TX_READY;
+			if (bdp->cbd_sc & BD_ENET_TX_WRAP)
+			{
+				bdp = cep->tx_bd_base;
+			}
+			else
+			{
+				bdp++;
+			}
+			cep->tx_skbuff[cep->skb_cur] = NULL;
+			bdp->cbd_datlen = third_len;
+			bdp->cbd_bufaddr = third;
+			cep->tx_free--;
+			cep->skb_cur = (cep->skb_cur + 1) & TX_RING_MOD_MASK;
+		}
+	}
+	bdp->cbd_sc = (bdp->cbd_sc & BD_ENET_TX_WRAP) | BD_ENET_TX_READY |
+	BD_ENET_TX_INTR | BD_ENET_TX_LAST | BD_ENET_TX_TC | pad;
+	if (count > 1)
+	{
+		first_bdp->cbd_sc = (first_bdp->cbd_sc & BD_ENET_TX_WRAP) | BD_ENET_TX_READY;
+	}
+
+	if (bdp->cbd_sc & BD_ENET_TX_WRAP)
+	{
+		bdp = cep->tx_bd_base;
+	}
+	else
+	{
+		bdp++;
+	}
+
+	if (!cep->tx_free)
+		netif_stop_queue(dev);
+
+	cep->cur_tx = (cbd_t *) bdp;
+
+	spin_unlock_irq(&cep->lock);
+
+	return 0;
+}
+
 static void
 scc_enet_timeout(struct net_device *dev)
 {
 	struct scc_enet_private *cep = (struct scc_enet_private *)dev->priv;
 
-	printk("%s: transmit timed out.\n", dev->name);
+	printk(KERN_ERR "%s: transmit timed out.\n", dev->name);
 	cep->stats.tx_errors++;
 #ifndef final_version
 	{
 		int	i;
 		cbd_t	*bdp;
-		printk(" Ring data dump: cur_tx %p tx_free %d cur_rx %p.\n",
+		printk(KERN_DEBUG " Ring data dump: cur_tx %p tx_free %d cur_rx %p.\n",
 		       cep->cur_tx, cep->tx_free,
 		       cep->cur_rx);
 		bdp = cep->tx_bd_base;
 		for (i = 0 ; i < TX_RING_SIZE; i++, bdp++)
-			printk("%04x %04x %08x\n",
+			printk(KERN_DEBUG "%04x %04x %08x\n",
 			       bdp->cbd_sc,
 			       bdp->cbd_datlen,
 			       bdp->cbd_bufaddr);
 		bdp = cep->rx_bd_base;
 		for (i = 0 ; i < RX_RING_SIZE; i++, bdp++)
-			printk("%04x %04x %08x\n",
+			printk(KERN_DEBUG "%04x %04x %08x\n",
 			       bdp->cbd_sc,
 			       bdp->cbd_datlen,
 			       bdp->cbd_bufaddr);
@@ -373,7 +461,8 @@
 
 		/* Free the sk buffer associated with this last transmit.
 		*/
-		dev_kfree_skb_irq(cep->tx_skbuff[cep->skb_dirty]);
+		if (cep->tx_skbuff[cep->skb_dirty])
+			dev_kfree_skb_irq(cep->tx_skbuff[cep->skb_dirty]);
 		cep->skb_dirty = (cep->skb_dirty + 1) & TX_RING_MOD_MASK;
 
 		/* Update pointer to next buffer descriptor to be transmitted.
@@ -439,8 +528,9 @@
 {
 	struct	scc_enet_private *cep;
 	volatile cbd_t	*bdp;
-	struct	sk_buff *skb;
+	struct	sk_buff *skb,*rx_skb;
 	ushort	pkt_len;
+	ushort	skb_cur_rx;
 
 	cep = (struct scc_enet_private *)dev->priv;
 
@@ -448,6 +538,7 @@
 	 * These get messed up if we get called due to a busy condition.
 	 */
 	bdp = cep->cur_rx;
+	skb_cur_rx = cep->skb_cur_rx;
 
 for (;;) {
 	if (bdp->cbd_sc & BD_ENET_RX_EMPTY)
@@ -459,7 +550,7 @@
 	 */
 	if ((bdp->cbd_sc & (BD_ENET_RX_FIRST | BD_ENET_RX_LAST)) !=
 		(BD_ENET_RX_FIRST | BD_ENET_RX_LAST))
-			printk("CPM ENET: rcv is not first+last\n");
+			printk(KERN_CRIT "CPM ENET: rcv is not first+last\n");
 #endif
 
 	/* Frame too long or too short.
@@ -486,47 +577,53 @@
 		*/
 		cep->stats.rx_packets++;
 		pkt_len = bdp->cbd_datlen;
-		cep->stats.rx_bytes += pkt_len;
+		cep->stats.rx_bytes += pkt_len - 4;
 
-		/* This does 16 byte alignment, much more than we need.
-		 * The packet length includes FCS, but we don't want to
-		 * include that when passing upstream as it messes up
-		 * bridging applications.
-		 */
-		skb = dev_alloc_skb(pkt_len-4);
+		/* Allocate a new skb
+		*/
 
-		if (skb == NULL) {
-			printk("%s: Memory squeeze, dropping packet.\n", dev->name);
-			cep->stats.rx_dropped++;
-		}
+		if ( (skb = dev_alloc_skb(PKT_MAXBLR_SIZE)) == NULL)
+		{
+			printk(KERN_ERR "%s: Memory squeeze, dropping packet.\n",dev->name);
+ 			cep->stats.rx_dropped++;
+ 		}
 		else {
-			skb->dev = dev;
-			skb_put(skb,pkt_len-4);	/* Make room */
-			eth_copy_and_sum(skb,
-				cep->rx_vaddr[bdp - cep->rx_bd_base],
-				pkt_len-4, 0);
-			skb->protocol=eth_type_trans(skb,dev);
-			netif_rx(skb);
+			/* swap new and filled skb
+			*/
+ 			skb->dev = dev;
+			/* invalidate data cache to prevent memory-modification in
+			 * write-back-mode and to get the real data on the next read
+			 */
+			invalidate_dcache_range((unsigned long) skb->data,(unsigned long) skb->data + PKT_MAXBLR_SIZE - 1);
+			rx_skb = cep->rx_skbuff[skb_cur_rx];
+			cep->rx_skbuff[skb_cur_rx] = skb;
+			bdp->cbd_bufaddr = __pa(skb->data);
+
+			/* Don't include FCS as it messes up bridging applications */
+			skb_put(rx_skb,pkt_len-4);
+			rx_skb->protocol=eth_type_trans(rx_skb,dev);
+			netif_rx(rx_skb);
 		}
 	}
 
-	/* Clear the status flags for this buffer.
-	*/
-	bdp->cbd_sc &= ~BD_ENET_RX_STATS;
-
-	/* Mark the buffer empty.
+	/* Clear the status flags for this buffer and mark the buffer empty.
 	*/
-	bdp->cbd_sc |= BD_ENET_RX_EMPTY;
+	bdp->cbd_sc = (bdp->cbd_sc & ~BD_ENET_RX_STATS) | BD_ENET_RX_EMPTY;
 
 	/* Update BD pointer to next entry.
 	*/
-	if (bdp->cbd_sc & BD_ENET_RX_WRAP)
+	if (bdp->cbd_sc & BD_ENET_RX_WRAP) {
 		bdp = cep->rx_bd_base;
-	else
+		skb_cur_rx = 0;
+	}
+	else {
 		bdp++;
+		skb_cur_rx++;
+	}
 
    }
 	cep->cur_rx = (cbd_t *)bdp;
+	cep->skb_cur_rx = skb_cur_rx;
 
 	return 0;
 }
@@ -574,7 +671,7 @@
 	if (dev->flags&IFF_PROMISC) {
 
 		/* Log any net taps. */
-		printk("%s: Promiscuous mode enabled.\n", dev->name);
+		printk(KERN_INFO "%s: Promiscuous mode enabled.\n", dev->name);
 		cep->sccp->scc_pmsr |= SCC_PMSR_PRO;
 	} else {
 
@@ -637,9 +734,8 @@
 {
 	struct net_device *dev;
 	struct scc_enet_private *cep;
-	int i, j, k;
-	unsigned char	*eap, *ba;
-	dma_addr_t	mem_addr;
+	int i;
+	unsigned char	*eap;
 	bd_t		*bd;
 	volatile	cbd_t		*bdp;
 	volatile	cpm8xx_t	*cp;
@@ -749,6 +845,7 @@
 	cep->dirty_tx = cep->cur_tx = cep->tx_bd_base;
 	cep->tx_free = TX_RING_SIZE;
 	cep->cur_rx = cep->rx_bd_base;
+	cep->skb_cur_rx = 0;
 
 	/* Issue init Rx BD command for SCC.
 	 * Manual says to perform an Init Rx parameters here.  We have
@@ -829,24 +926,21 @@
 	bdp--;
 	bdp->cbd_sc |= BD_SC_WRAP;
 
-	bdp = cep->rx_bd_base;
-	k = 0;
-	for (i=0; i<CPM_ENET_RX_PAGES; i++) {
+	/* allocate skbs for receive-buffers */
 
-		/* Allocate a page.
-		*/
-		ba = (unsigned char *)consistent_alloc(GFP_KERNEL, PAGE_SIZE, &mem_addr);
+	bdp = cep->rx_bd_base;
 
-		/* Initialize the BD for every fragment in the page.
-		*/
-		for (j=0; j<CPM_ENET_RX_FRPPG; j++) {
-			bdp->cbd_sc = BD_ENET_RX_EMPTY | BD_ENET_RX_INTR;
-			bdp->cbd_bufaddr = mem_addr;
-			cep->rx_vaddr[k++] = ba;
-			mem_addr += CPM_ENET_RX_FRSIZE;
-			ba += CPM_ENET_RX_FRSIZE;
-			bdp++;
-		}
+	for (i=0; i<RX_RING_SIZE; i++) {
+		cep->rx_skbuff[i] = dev_alloc_skb(PKT_MAXBLR_SIZE);
+		cep->rx_skbuff[i]->dev = dev;
+		/* invalidate data cache to prevent memory-modification in
+		 * write-back-mode and to get the real data on the next read.
+		 */
+		invalidate_dcache_range((unsigned long) cep->rx_skbuff[i]->data,
+			(unsigned long) cep->rx_skbuff[i]->data + PKT_MAXBLR_SIZE - 1);
+		bdp->cbd_sc = BD_ENET_RX_EMPTY | BD_ENET_RX_INTR;
+		bdp->cbd_bufaddr = __pa(cep->rx_skbuff[i]->data);
+		bdp++;
 	}
 
 	/* Set the last buffer to wrap.
@@ -954,7 +1048,7 @@
 	*/
 	sccp->scc_gsmrl |= (SCC_GSMRL_ENR | SCC_GSMRL_ENT);
 
-	printk("%s: CPM ENET Version 0.2 on SCC%d, ", dev->name, SCC_ENET+1);
+	printk(KERN_INFO "%s: CPM ENET Version 0.2.dbox2 on SCC%d, ", dev->name, SCC_ENET+1);
 	for (i=0; i<5; i++)
 		printk("%02x:", dev->dev_addr[i]);
 	printk("%02x\n", dev->dev_addr[5]);
diff -Naur linux-2.4.31/arch/ppc/kernel/m8xx_setup.c linux-2.4.31-dbox2/arch/ppc/kernel/m8xx_setup.c
--- linux-2.4.31/arch/ppc/kernel/m8xx_setup.c	2004-02-18 14:36:30.000000000 +0100
+++ linux-2.4.31-dbox2/arch/ppc/kernel/m8xx_setup.c	2005-06-03 11:02:05.000000000 +0200
@@ -134,6 +134,17 @@
 	/* Force all 8xx processors to use divide by 16 processor clock. */
 	((volatile immap_t *)IMAP_ADDR)->im_clkrst.car_sccr |= 0x02000000;
 
+#ifdef CONFIG_DBOX2
+	if ((binfo->bi_intfreq < 1000000) || (binfo->bi_busfreq < 1000000)) {
+	    printk(KERN_INFO "WARNING: Frequency is not in HZ. Please consider using a newer bootloader!\n");
+	    printk(KERN_INFO "WARNING: OLD intfreq = %ld busfreq = %ld\n", binfo->bi_intfreq, binfo->bi_busfreq);
+
+	    binfo->bi_intfreq *= 1000000;
+	    binfo->bi_busfreq *= 1000000;
+
+	    printk(KERN_INFO "WARNING: NEW intfreq = %ld busfreq = %ld\n", binfo->bi_intfreq, binfo->bi_busfreq);
+	}
+#endif
 	/* Processor frequency is MHz.
 	 * The value 'fp' is the number of decrementer ticks per second.
 	 */
diff -Naur linux-2.4.31/arch/ppc/kernel/ppc_ksyms.c linux-2.4.31-dbox2/arch/ppc/kernel/ppc_ksyms.c
--- linux-2.4.31/arch/ppc/kernel/ppc_ksyms.c	2004-04-14 15:05:27.000000000 +0200
+++ linux-2.4.31-dbox2/arch/ppc/kernel/ppc_ksyms.c	2005-06-03 11:02:05.000000000 +0200
@@ -359,6 +359,9 @@
 EXPORT_SYMBOL(cpm_free_handler);
 EXPORT_SYMBOL(m8xx_cpm_hostalloc);
 EXPORT_SYMBOL(m8xx_cpm_dpalloc);
+extern int scc_enet_multiple_xmit(struct net_device, unsigned, unsigned,
+	unsigned, unsigned, unsigned, unsigned, unsigned);
+EXPORT_SYMBOL(scc_enet_multiple_xmit);
 #ifdef CONFIG_8xx_WDT
 extern int m8xx_wdt_get_timeout(void);
 extern void m8xx_wdt_reset(void);
diff -Naur linux-2.4.31/arch/ppc/kernel/time.c linux-2.4.31-dbox2/arch/ppc/kernel/time.c
--- linux-2.4.31/arch/ppc/kernel/time.c	2005-06-01 02:56:56.000000000 +0200
+++ linux-2.4.31-dbox2/arch/ppc/kernel/time.c	2005-06-03 11:02:05.000000000 +0200
@@ -70,6 +70,9 @@
 unsigned long disarm_decr[NR_CPUS];
 
 extern int do_sys_settimeofday(struct timeval *tv, struct timezone *tz);
+#ifdef CONFIG_DBOX2
+extern void m8xx_wdt_reset(void);
+#endif
 
 /* keep track of when we need to update the rtc */
 time_t last_rtc_update;
@@ -320,6 +323,10 @@
 		sec = ppc_md.get_rtc_time();
 		elapsed = 0;
 		do {
+#ifdef CONFIG_DBOX2
+			/* needed to fix wdt problems during boot on some boxes */
+			m8xx_wdt_reset();
+#endif
 			old_stamp = stamp;
 			old_sec = sec;
 			stamp = get_native_tbl();
diff -Naur linux-2.4.31/drivers/char/console.c linux-2.4.31-dbox2/drivers/char/console.c
--- linux-2.4.31/drivers/char/console.c	2005-01-19 15:09:44.000000000 +0100
+++ linux-2.4.31-dbox2/drivers/char/console.c	2005-06-03 11:02:05.000000000 +0200
@@ -110,7 +110,11 @@
 #include "console_macros.h"
 
 
-const struct consw *conswitchp;
+#ifdef CONFIG_DUMMY_CONSOLE
+const struct consw *conswitchp = &dummy_con;
+#else
+const struct consw *conswitchp = 0;
+#endif
 
 static void __console_callback(void);
 
diff -Naur linux-2.4.31/drivers/char/vt.c linux-2.4.31-dbox2/drivers/char/vt.c
--- linux-2.4.31/drivers/char/vt.c	2005-01-19 15:09:53.000000000 +0100
+++ linux-2.4.31-dbox2/drivers/char/vt.c	2005-06-03 11:02:05.000000000 +0200
@@ -93,7 +93,8 @@
 #if defined(__i386__) || defined(__alpha__) || defined(CONFIG_PPC_ISATIMER) \
     || (defined(__mips__) && defined(CONFIG_ISA)) \
     || (defined(__arm__) && defined(CONFIG_HOST_FOOTBRIDGE)) \
-    || defined(__x86_64__)
+    || defined(__x86_64__) \
+    || (defined(__powerpc__) && !defined(CONFIG_DBOX2))
 
 static void
 kd_nosound(unsigned long ignored)
diff -Naur linux-2.4.31/drivers/input/keybdev.c linux-2.4.31-dbox2/drivers/input/keybdev.c
--- linux-2.4.31/drivers/input/keybdev.c	2004-02-18 14:36:31.000000000 +0100
+++ linux-2.4.31-dbox2/drivers/input/keybdev.c	2005-06-03 11:02:05.000000000 +0200
@@ -108,7 +108,11 @@
 #endif	/* CONFIG_MAC_ADBKEYCODES || CONFIG_ADB_KEYBOARD */
 
 	if (keycode > 255 || !x86_keycodes[keycode])
+#ifdef CONFIG_DBOX2
+		return 0; 
+#else
 		return -1; 
+#endif
 
 	if (keycode == KEY_PAUSE) {
 		handle_scancode(0xe1, 1);
diff -Naur linux-2.4.31/drivers/video/fbcmap.c linux-2.4.31-dbox2/drivers/video/fbcmap.c
--- linux-2.4.31/drivers/video/fbcmap.c	2003-11-28 19:26:21.000000000 +0100
+++ linux-2.4.31-dbox2/drivers/video/fbcmap.c	2005-06-03 11:02:05.000000000 +0200
@@ -271,7 +271,7 @@
 	    hred = *red;
 	    hgreen = *green;
 	    hblue = *blue;
-	    htransp = transp ? *transp : 0xffff;
+	    htransp = transp ? *transp : 0;
 	} else {
 	    get_user(hred, red);
 	    get_user(hgreen, green);
@@ -279,7 +279,7 @@
 	    if (transp)
 		get_user(htransp, transp);
 	    else
-		htransp = 0xffff;
+		htransp = 0;
 	}
 	red++;
 	green++;
diff -Naur linux-2.4.31/include/linux/input.h linux-2.4.31-dbox2/include/linux/input.h
--- linux-2.4.31/include/linux/input.h	2004-02-18 14:36:32.000000000 +0100
+++ linux-2.4.31-dbox2/include/linux/input.h	2005-06-03 11:02:05.000000000 +0200
@@ -310,6 +310,77 @@
 #define KEY_BRIGHTNESSDOWN	224
 #define KEY_BRIGHTNESSUP	225
 
+#define KEY_OK           0x160
+#define KEY_SELECT       0x161
+#define KEY_GOTO         0x162
+#define KEY_CLEAR        0x163
+#define KEY_POWER2       0x164
+#define KEY_OPTION       0x165
+#define KEY_INFO         0x166
+#define KEY_TIME         0x167
+#define KEY_VENDOR       0x168
+#define KEY_ARCHIVE      0x169
+#define KEY_PROGRAM      0x16a
+#define KEY_CHANNEL      0x16b
+#define KEY_FAVORITES    0x16c
+#define KEY_EPG          0x16d
+#define KEY_PVR          0x16e
+#define KEY_MHP          0x16f
+#define KEY_LANGUAGE     0x170
+#define KEY_TITLE        0x171
+#define KEY_SUBTITLE     0x172
+#define KEY_ANGLE        0x173
+#define KEY_ZOOM         0x174
+#define KEY_MODE         0x175
+#define KEY_KEYBOARD     0x176
+#define KEY_SCREEN       0x177
+#define KEY_PC           0x178
+#define KEY_TV           0x179
+#define KEY_TV2          0x17a
+#define KEY_VCR          0x17b
+#define KEY_VCR2         0x17c
+#define KEY_SAT          0x17d
+#define KEY_SAT2         0x17e
+#define KEY_CD           0x17f
+#define KEY_TAPE         0x180
+#define KEY_RADIO        0x181
+#define KEY_TUNER        0x182
+#define KEY_PLAYER       0x183
+#define KEY_TEXT         0x184
+#define KEY_DVD          0x185
+#define KEY_AUX          0x186
+#define KEY_MP3          0x187
+#define KEY_AUDIO        0x188
+#define KEY_VIDEO        0x189
+#define KEY_DIRECTORY    0x18a
+#define KEY_LIST         0x18b
+#define KEY_MEMO         0x18c
+#define KEY_CALENDAR     0x18d
+#define KEY_RED          0x18e
+#define KEY_GREEN        0x18f
+#define KEY_YELLOW       0x190
+#define KEY_BLUE         0x191
+#define KEY_CHANNELUP    0x192
+#define KEY_CHANNELDOWN  0x193
+#define KEY_FIRST        0x194
+#define KEY_LAST         0x195
+#define KEY_AB           0x196
+#define KEY_PLAY         0x197
+#define KEY_RESTART      0x198
+#define KEY_SLOW         0x199
+#define KEY_SHUFFLE      0x19a
+#define KEY_FASTFORWARD  0x19b
+#define KEY_PREVIOUS     0x19c
+#define KEY_NEXT         0x19d
+#define KEY_DIGITS       0x19e
+#define KEY_TEEN         0x19f
+#define KEY_TWEN         0x1a0
+#define KEY_BREAK        0x1a1
+#define KEY_TOPLEFT      0x1a2
+#define KEY_TOPRIGHT     0x1a3
+#define KEY_BOTTOMLEFT   0x1a4
+#define KEY_BOTTOMRIGHT  0x1a5
+
 #define BTN_MISC		0x100
 #define BTN_0			0x100
 #define BTN_1			0x101

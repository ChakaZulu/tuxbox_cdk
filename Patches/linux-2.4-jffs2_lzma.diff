diff -uNr linux-2.4.37.2.org/fs/Config.in linux-2.4.37.2/fs/Config.in
--- linux-2.4.37.2.org/fs/Config.in	2009-07-26 19:42:36.000000000 +0200
+++ linux-2.4.37.2/fs/Config.in	2009-07-26 19:43:40.000000000 +0200
@@ -55,6 +55,7 @@
    bool 'JFFS2 RUBIN compression support' CONFIG_JFFS2_RUBIN
    bool 'JFFS2 LZO compression support' CONFIG_JFFS2_LZO
    bool 'JFFS2 LZARI compression support' CONFIG_JFFS2_LZARI
+   bool 'JFFS2 LZMA compression support' CONFIG_JFFS2_LZMA
    choice 'JFFS2 default compression mode' \
         "none                                   CONFIG_JFFS2_CMODE_NONE \
          priority                               CONFIG_JFFS2_CMODE_PRIORITY \
diff -uNr linux-2.4.37.2.org/fs/jffs2/compr.c linux-2.4.37.2/fs/jffs2/compr.c
--- linux-2.4.37.2.org/fs/jffs2/compr.c	2009-07-26 19:42:36.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/compr.c	2009-07-26 19:43:40.000000000 +0200
@@ -441,6 +441,9 @@
 #ifdef CONFIG_JFFS2_LZO
         jffs2_lzo_init();
 #endif
+#ifdef CONFIG_JFFS2_LZMA
+        jffs2_lzma_init();
+#endif
 /* Setting default compression mode */
 #ifdef CONFIG_JFFS2_CMODE_NONE
         jffs2_compression_mode = JFFS2_COMPR_MODE_NONE;
@@ -475,5 +478,8 @@
 #ifdef CONFIG_JFFS2_ZLIB
         jffs2_zlib_exit();
 #endif
+#ifdef CONFIG_JFFS2_LZMA
+        jffs2_lzma_exit();
+#endif
         return 0;
 }
diff -uNr linux-2.4.37.2.org/fs/jffs2/compr.h linux-2.4.37.2/fs/jffs2/compr.h
--- linux-2.4.37.2.org/fs/jffs2/compr.h	2009-07-26 19:42:36.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/compr.h	2009-07-26 19:43:40.000000000 +0200
@@ -33,6 +33,7 @@
 #define JFFS2_LZO_PRIORITY       40
 #define JFFS2_RTIME_PRIORITY     50
 #define JFFS2_ZLIB_PRIORITY      60
+#define JFFS2_LZMA_PRIORITY      70
 
 #define JFFS2_RUBINMIPS_DISABLED /* RUBINs will be used only */
 #define JFFS2_DYNRUBIN_DISABLED  /*        for decompression */
@@ -114,5 +115,9 @@
 int jffs2_lzo_init(void);
 void jffs2_lzo_exit(void);
 #endif
+#ifdef CONFIG_JFFS2_LZMA
+int jffs2_lzma_init(void);
+void jffs2_lzma_exit(void);
+#endif
 
 #endif /* __JFFS2_COMPR_H__ */
diff -uNr linux-2.4.37.2.org/fs/jffs2/compr_lzma.c linux-2.4.37.2/fs/jffs2/compr_lzma.c
--- linux-2.4.37.2.org/fs/jffs2/compr_lzma.c	1970-01-01 01:00:00.000000000 +0100
+++ linux-2.4.37.2/fs/jffs2/compr_lzma.c	2009-07-26 19:43:40.000000000 +0200
@@ -0,0 +1,134 @@
+/*
+ * JFFS2 -- Journalling Flash File System, Version 2.
+ *
+ * Copyright (C) 2008 Nikos Mavrogiannopoulos.
+ *
+ * compr_lzma is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *               
+ * compr_lzma is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *                               
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/jffs2.h>
+#include "compr.h"
+#include <linux/vmalloc.h>
+#include "LzmaDec.h"
+#include "LzmaEnc.h"
+
+
+#ifndef JFFS2_COMPR_LZMA
+# define JFFS2_COMPR_LZMA 0x15
+#endif
+
+static void* my_alloc( void* p, size_t size)
+{
+  return kmalloc(size, GFP_KERNEL);
+}
+
+static void my_free( void* p, void* addr)
+{
+  kfree(addr);
+}
+
+static void* my_bigalloc( void* p, size_t size)
+{
+  return vmalloc(size);
+}
+
+static void my_bigfree( void* p, void* addr)
+{
+  vfree(addr);
+}
+
+const CLzmaEncProps lzma_props = {
+  .level = 1, /* unused */
+  .lc = 3,
+  .lp = 0,
+  .pb = 2,
+  .algo = 1,
+  .fb = 32,
+  .btMode = 1,
+  .mc = 32,
+  .writeEndMark = 0,
+  .numThreads = 1,
+  .numHashBytes = 4,
+  /* something more than this doesn't seem to offer anything
+   * practical and increases memory size.
+   */
+  .dictSize = 1 << 13,
+};
+
+ISzAlloc xalloc = { my_alloc, my_free };
+ISzAlloc xbigalloc = { my_bigalloc, my_bigfree };
+
+int jffs2_lzma_compress(unsigned char *data_in, unsigned char *cpage_out,
+		uint32_t *sourcelen, uint32_t *dstlen, void *model)
+{
+	int ret;
+	size_t props_size = LZMA_PROPS_SIZE;
+	size_t data_out_size = (*dstlen)-LZMA_PROPS_SIZE;
+
+	if (*dstlen < LZMA_PROPS_SIZE)
+		return -1;
+
+        ret = LzmaEncode_2008( cpage_out+LZMA_PROPS_SIZE, &data_out_size, 
+        	data_in, *sourcelen, &lzma_props, 
+        	cpage_out, &props_size, 0, NULL, &xalloc, &xbigalloc);
+        	
+	if (ret != SZ_OK)
+		return -1;
+
+	*dstlen = data_out_size + LZMA_PROPS_SIZE;
+	
+	return 0;
+}
+
+int jffs2_lzma_decompress(unsigned char *data_in, unsigned char *cpage_out,
+		uint32_t srclen, uint32_t destlen, void *model)
+{
+	int ret;
+	size_t data_out_size = destlen;
+	size_t data_in_size = srclen - LZMA_PROPS_SIZE;
+	ELzmaStatus status;
+	
+	if (srclen < LZMA_PROPS_SIZE)
+		return -1;
+	
+	ret = LzmaDecode_2008( cpage_out, &data_out_size, data_in+LZMA_PROPS_SIZE, &data_in_size, 
+		data_in, LZMA_PROPS_SIZE, LZMA_FINISH_ANY, &status, &xalloc);
+	
+	if (ret != SZ_OK)
+		return -1;
+
+	return 0;
+}
+
+static struct jffs2_compressor jffs2_lzma_comp = {
+    .priority = JFFS2_LZMA_PRIORITY,
+    .name = "lzma",
+    .disabled = 0,
+    .compr = JFFS2_COMPR_LZMA,
+    .compress = NULL,
+    .decompress = &jffs2_lzma_decompress,
+};
+
+int jffs2_lzma_init(void)
+{
+    return jffs2_register_compressor(&jffs2_lzma_comp);
+}
+
+void jffs2_lzma_exit(void)
+{
+    jffs2_unregister_compressor(&jffs2_lzma_comp);
+}
diff -uNr linux-2.4.37.2.org/fs/jffs2/LzFind.c linux-2.4.37.2/fs/jffs2/LzFind.c
--- linux-2.4.37.2.org/fs/jffs2/LzFind.c	2008-10-04 11:53:19.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/LzFind.c	2009-07-26 19:43:40.000000000 +0200
@@ -1,7 +1,7 @@
 /* LzFind.c -- Match finder for LZ algorithms
 2008-10-04 : Igor Pavlov : Public domain */
 
-#include <string.h>
+#include <linux/string.h>
 
 #include "LzFind.h"
 #include "LzHash.h"
diff -uNr linux-2.4.37.2.org/fs/jffs2/LzmaDec.c linux-2.4.37.2/fs/jffs2/LzmaDec.c
--- linux-2.4.37.2.org/fs/jffs2/LzmaDec.c	2008-11-06 08:31:07.000000000 +0100
+++ linux-2.4.37.2/fs/jffs2/LzmaDec.c	2009-07-26 19:45:39.000000000 +0200
@@ -3,7 +3,7 @@
 
 #include "LzmaDec.h"
 
-#include <string.h>
+#include <linux/string.h>
 
 #define kNumTopBits 24
 #define kTopValue ((UInt32)1 << kNumTopBits)
@@ -690,7 +690,7 @@
   p->needFlush = 0;
 }
 
-void LzmaDec_InitDicAndState(CLzmaDec *p, Bool initDic, Bool initState)
+static void LzmaDec_InitDicAndState(CLzmaDec *p, Bool initDic, Bool initState)
 {
   p->needFlush = 1;
   p->remainLen = 0;
@@ -974,7 +974,7 @@
   return SZ_OK;
 }
 
-SRes LzmaDecode(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen,
+SRes LzmaDecode_2008(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen,
     const Byte *propData, unsigned propSize, ELzmaFinishMode finishMode,
     ELzmaStatus *status, ISzAlloc *alloc)
 {
diff -uNr linux-2.4.37.2.org/fs/jffs2/LzmaDec.h linux-2.4.37.2/fs/jffs2/LzmaDec.h
--- linux-2.4.37.2.org/fs/jffs2/LzmaDec.h	2008-10-04 11:53:19.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/LzmaDec.h	2009-07-26 19:45:58.000000000 +0200
@@ -197,7 +197,7 @@
 
 /* ---------- One Call Interface ---------- */
 
-/* LzmaDecode
+/* LzmaDecode_2008
 
 finishMode:
   It has meaning only if the decoding reaches output limit (*destLen).
@@ -216,7 +216,7 @@
   SZ_ERROR_INPUT_EOF - It needs more bytes in input buffer (src).
 */
 
-SRes LzmaDecode(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen,
+SRes LzmaDecode_2008(Byte *dest, SizeT *destLen, const Byte *src, SizeT *srcLen,
     const Byte *propData, unsigned propSize, ELzmaFinishMode finishMode,
     ELzmaStatus *status, ISzAlloc *alloc);
 
diff -uNr linux-2.4.37.2.org/fs/jffs2/LzmaEnc.c linux-2.4.37.2/fs/jffs2/LzmaEnc.c
--- linux-2.4.37.2.org/fs/jffs2/LzmaEnc.c	2009-02-02 08:34:23.000000000 +0100
+++ linux-2.4.37.2/fs/jffs2/LzmaEnc.c	2009-07-26 19:47:15.000000000 +0200
@@ -1,14 +1,7 @@
 /* LzmaEnc.c -- LZMA Encoder
 2009-02-02 : Igor Pavlov : Public domain */
 
-#include <string.h>
-
-/* #define SHOW_STAT */
-/* #define SHOW_STAT2 */
-
-#if defined(SHOW_STAT) || defined(SHOW_STAT2)
-#include <stdio.h>
-#endif
+#include <linux/string.h>
 
 #include "LzmaEnc.h"
 
@@ -2258,7 +2251,7 @@
   return res;
 }
 
-SRes LzmaEncode(Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
+SRes LzmaEncode_2008(Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
     const CLzmaEncProps *props, Byte *propsEncoded, SizeT *propsSize, int writeEndMark,
     ICompressProgress *progress, ISzAlloc *alloc, ISzAlloc *allocBig)
 {
diff -uNr linux-2.4.37.2.org/fs/jffs2/LzmaEnc.h linux-2.4.37.2/fs/jffs2/LzmaEnc.h
--- linux-2.4.37.2.org/fs/jffs2/LzmaEnc.h	2008-10-04 11:53:19.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/LzmaEnc.h	2009-07-26 19:47:30.000000000 +0200
@@ -56,7 +56,7 @@
 
 /* ---------- One Call Interface ---------- */
 
-/* LzmaEncode
+/* LzmaEncode_2008
 Return code:
   SZ_OK               - OK
   SZ_ERROR_MEM        - Memory allocation error
@@ -65,7 +65,7 @@
   SZ_ERROR_THREAD     - errors in multithreading functions (only for Mt version)
 */
 
-SRes LzmaEncode(Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
+SRes LzmaEncode_2008(Byte *dest, SizeT *destLen, const Byte *src, SizeT srcLen,
     const CLzmaEncProps *props, Byte *propsEncoded, SizeT *propsSize, int writeEndMark,
     ICompressProgress *progress, ISzAlloc *alloc, ISzAlloc *allocBig);
 
diff -uNr linux-2.4.37.2.org/fs/jffs2/Makefile linux-2.4.37.2/fs/jffs2/Makefile
--- linux-2.4.37.2.org/fs/jffs2/Makefile	2009-07-26 19:42:36.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/Makefile	2009-07-26 19:43:40.000000000 +0200
@@ -36,6 +36,7 @@
 COMPR_OBJS-$(CONFIG_JFFS2_ZLIB)   += compr_zlib.o
 COMPR_OBJS-$(CONFIG_JFFS2_LZO)	+= compr_lzo.o
 COMPR_OBJS-$(CONFIG_JFFS2_LZARI)	+= compr_lzari.o
+COMPR_OBJS-$(CONFIG_JFFS2_LZMA)   += compr_lzma.o LzmaDec.o LzmaEnc.o LzFind.o
 
 obj-y := $(COMPR_OBJS-y) $(JFFS2_OBJS) $(LINUX_OBJS) $(WBUF_OBJS-y)
 O_TARGET := jffs2.o
diff -uNr linux-2.4.37.2.org/fs/jffs2/Makefile.common linux-2.4.37.2/fs/jffs2/Makefile.common
--- linux-2.4.37.2.org/fs/jffs2/Makefile.common	2009-07-26 19:42:36.000000000 +0200
+++ linux-2.4.37.2/fs/jffs2/Makefile.common	2009-07-26 19:43:40.000000000 +0200
@@ -17,3 +17,4 @@
 jffs2-$(CONFIG_JFFS2_ZLIB)	+= compr_zlib.o
 jffs2-$(CONFIG_JFFS2_LZO)	+= compr_lzo.o
 jffs2-$(CONFIG_JFFS2_LZARI)	+= compr_lzari.o
+jffs2-$(CONFIG_JFFS2_LZMA)	+= compr_lzma.o LzmaDec.o LzmaEnc.o LzFind.o
diff -uNr linux-2.4.37.2.org/include/linux/jffs2.h linux-2.4.37.2/include/linux/jffs2.h
--- linux-2.4.37.2.org/include/linux/jffs2.h	2009-07-26 19:42:36.000000000 +0200
+++ linux-2.4.37.2/include/linux/jffs2.h	2009-07-26 19:43:40.000000000 +0200
@@ -45,6 +45,7 @@
 #define JFFS2_COMPR_ZLIB	0x06
 #define JFFS2_COMPR_LZO         0x07
 #define JFFS2_COMPR_LZARI       0x08
+#define JFFS2_COMPR_LZMA	0x15
 /* Compatibility flags. */
 #define JFFS2_COMPAT_MASK 0xc000      /* What do to if an unknown nodetype is found */
 #define JFFS2_NODE_ACCURATE 0x2000

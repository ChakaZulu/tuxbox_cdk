diff -uNr xfsprogs-2.9.4.org/copy/xfs_copy.c xfsprogs-2.9.4/copy/xfs_copy.c
--- xfsprogs-2.9.4.org/copy/xfs_copy.c	2007-09-11 04:01:14.000000000 +0200
+++ xfsprogs-2.9.4/copy/xfs_copy.c	2009-05-19 19:00:02.000000000 +0200
@@ -912,7 +912,7 @@
 
 		/* save what we need (agf) in the btree buffer */
 
-		bcopy(ag_hdr.xfs_agf, btree_buf.data, source_sectorsize);
+		memmove(btree_buf.data, ag_hdr.xfs_agf, source_sectorsize);
 		ag_hdr.xfs_agf = (xfs_agf_t *) btree_buf.data;
 		btree_buf.length = source_blocksize;
 
diff -uNr xfsprogs-2.9.4.org/logprint/log_misc.c xfsprogs-2.9.4/logprint/log_misc.c
--- xfsprogs-2.9.4.org/logprint/log_misc.c	2007-09-11 04:01:19.000000000 +0200
+++ xfsprogs-2.9.4/logprint/log_misc.c	2009-05-19 18:53:58.000000000 +0200
@@ -123,7 +123,7 @@
      * bcopy because on 64/n32, partial reads can cause the op_head
      * pointer to come in pointing to an odd-numbered byte
      */
-    bcopy(op_head, &hbuf, sizeof(xlog_op_header_t));
+    memmove(&hbuf, op_head, sizeof(xlog_op_header_t));
     op_head = &hbuf;
     *ptr += sizeof(xlog_op_header_t);
     printf("Oper (%d): tid: %x  len: %d  clientid: %s  ", i,
@@ -257,7 +257,7 @@
      * bcopy to ensure 8-byte alignment for the long longs in
      * buf_log_format_t structure
      */
-    bcopy(*ptr, &lbuf, MIN(sizeof(xfs_buf_log_format_t), len));
+    memmove(&lbuf, *ptr, MIN(sizeof(xfs_buf_log_format_t), len));
     f = &lbuf;
     *ptr += len;
 
@@ -324,13 +324,13 @@
 			/*
 			 * bcopy because *ptr may not be 8-byte aligned
 			 */
-			bcopy(*ptr, &x, sizeof(long long));
-			bcopy(*ptr+8, &y, sizeof(long long));
+			memmove(&x, *ptr, sizeof(long long));
+			memmove(&y, *ptr+8, sizeof(long long));
 			printf("icount: %lld  ifree: %lld  ",
 				INT_GET(x, ARCH_CONVERT),
 				INT_GET(y, ARCH_CONVERT));
-			bcopy(*ptr+16, &x, sizeof(long long));
-			bcopy(*ptr+24, &y, sizeof(long long));
+			memmove(&x, *ptr+16, sizeof(long long));
+			memmove(&y, *ptr+24, sizeof(long long));
 			printf("fdblks: %lld  frext: %lld\n",
 				INT_GET(x, ARCH_CONVERT),
 				INT_GET(y, ARCH_CONVERT));
@@ -481,7 +481,7 @@
      * bcopy to ensure 8-byte alignment for the long longs in
      * xfs_efd_log_format_t structure
      */
-    bcopy(*ptr, &lbuf, MIN(core_size, len));
+    memmove(&lbuf, *ptr, MIN(core_size, len));
     f = &lbuf;
     *ptr += len;
     if (len >= core_size) {
@@ -515,7 +515,7 @@
 	fprintf(stderr, "%s: xlog_print_trans_efi: malloc failed\n", progname);
 	exit(1);
     }
-    bcopy(*ptr, (char*)src_f, src_len);
+    memmove((char*)src_f, *ptr, src_len);
     *ptr += src_len;
 
     /* convert to native format */
@@ -552,7 +552,7 @@
     xfs_qoff_logformat_t *f;
     xfs_qoff_logformat_t lbuf;
 
-    bcopy(*ptr, &lbuf, MIN(sizeof(xfs_qoff_logformat_t), len));
+    memmove(&lbuf, *ptr, MIN(sizeof(xfs_qoff_logformat_t), len));
     f = &lbuf;
     *ptr += len;
     if (len >= sizeof(xfs_qoff_logformat_t)) {
@@ -606,14 +606,14 @@
 
 	printf("SHORTFORM DIRECTORY size %d count %d\n",
 	       size, sfp->hdr.count);
-	bcopy(&(sfp->hdr.parent), &ino, sizeof(ino));
+	memmove(&ino, &(sfp->hdr.parent), sizeof(ino));
 	printf(".. ino 0x%llx\n", (unsigned long long)INT_GET(ino, ARCH_CONVERT));
 
 	count = (uint)(sfp->hdr.count);
 	sfep = &(sfp->list[0]);
 	for (i = 0; i < count; i++) {
-		bcopy(&(sfep->inumber), &ino, sizeof(ino));
-		bcopy((sfep->name), namebuf, sfep->namelen);
+		memmove(&ino, &(sfep->inumber), sizeof(ino));
+		memmove(namebuf, (sfep->name), sfep->namelen);
 		namebuf[sfep->namelen] = '\0';
 		printf("%s ino 0x%llx namelen %d\n",
 		       namebuf, (unsigned long long)ino, sfep->namelen);
@@ -641,7 +641,7 @@
      * len can be smaller than xfs_inode_log_format_32|64_t 
      * if format data is split over operations
      */
-    bcopy(*ptr, &src_lbuf, MIN(sizeof(xfs_inode_log_format_64_t), len));
+    memmove(&src_lbuf, *ptr, MIN(sizeof(xfs_inode_log_format_64_t), len));
     (*i)++;					/* bump index */
     *ptr += len;
     if (len == sizeof(xfs_inode_log_format_32_t) ||
@@ -672,7 +672,7 @@
 	return f->ilf_size-1;
     }
 
-    bcopy(*ptr, &dino, sizeof(dino));
+    memmove(&dino, *ptr, sizeof(dino));
     mode = dino.di_mode & S_IFMT;
     size = (int)dino.di_size;
     xlog_print_trans_inode_core(&dino);
@@ -794,7 +794,7 @@
      * bcopy to ensure 8-byte alignment for the long longs in
      * xfs_dq_logformat_t structure
      */
-    bcopy(*ptr, &lbuf, MIN(sizeof(xfs_dq_logformat_t), len));
+    memmove(&lbuf, *ptr, MIN(sizeof(xfs_dq_logformat_t), len));
     f = &lbuf;
     (*i)++;					/* bump index */
     *ptr += len;
@@ -823,7 +823,7 @@
 	head = (xlog_op_header_t *)*ptr;
 	xlog_print_op_header(head, *i, ptr);
 	ASSERT(INT_GET(head->oh_len, ARCH_CONVERT) == sizeof(xfs_disk_dquot_t));
-	bcopy(*ptr, &ddq, sizeof(xfs_disk_dquot_t));
+	memmove(&ddq, *ptr, sizeof(xfs_disk_dquot_t));
 	printf("DQUOT: magic 0x%hx flags 0%ho\n",
 	       INT_GET(ddq.d_magic, ARCH_CONVERT),
 	       INT_GET(ddq.d_flags, ARCH_CONVERT));
diff -uNr xfsprogs-2.9.4.org/mkfs/proto.c xfsprogs-2.9.4/mkfs/proto.c
--- xfsprogs-2.9.4.org/mkfs/proto.c	2007-09-11 04:01:19.000000000 +0200
+++ xfsprogs-2.9.4/mkfs/proto.c	2009-05-19 18:59:53.000000000 +0200
@@ -234,7 +234,7 @@
 	if (dolocal && len <= XFS_IFORK_DSIZE(ip)) {
 		libxfs_idata_realloc(ip, len, XFS_DATA_FORK);
 		if (buf)
-			bcopy(buf, ip->i_df.if_u1.if_data, len);
+			memmove(ip->i_df.if_u1.if_data, buf, len);
 		ip->i_d.di_size = len;
 		ip->i_df.if_flags &= ~XFS_IFEXTENTS;
 		ip->i_df.if_flags |= XFS_IFINLINE;
@@ -257,7 +257,7 @@
 		d = XFS_FSB_TO_DADDR(mp, map.br_startblock);
 		bp = libxfs_trans_get_buf(logit ? tp : 0, mp->m_dev, d,
 			nb << mp->m_blkbb_log, 0);
-		bcopy(buf, XFS_BUF_PTR(bp), len);
+		memmove(XFS_BUF_PTR(bp), buf, len);
 		if (len < XFS_BUF_COUNT(bp))
 			bzero(XFS_BUF_PTR(bp) + len, XFS_BUF_COUNT(bp) - len);
 		if (logit)
diff -uNr xfsprogs-2.9.4.org/repair/attr_repair.c xfsprogs-2.9.4/repair/attr_repair.c
--- xfsprogs-2.9.4.org/repair/attr_repair.c	2007-09-11 04:01:20.000000000 +0200
+++ xfsprogs-2.9.4/repair/attr_repair.c	2009-05-19 18:59:29.000000000 +0200
@@ -95,7 +95,7 @@
 				SGI_ACL_DEFAULT_SIZE) == 0)) {
 		if (value == NULL) {
 			bzero(&thisacl, sizeof(xfs_acl_t));
-			bcopy(namevalue+namelen, &thisacl, valuelen);
+			memmove(&thisacl, namevalue+namelen, valuelen);
 			valuep = &thisacl;
 		} else
 			valuep = value;
@@ -109,7 +109,7 @@
 	} else if (strncmp(namevalue, SGI_MAC_FILE, SGI_MAC_FILE_SIZE) == 0) {
 		if (value == NULL) {
 			bzero(&macl, sizeof(xfs_mac_label_t));
-			bcopy(namevalue+namelen, &macl, valuelen);
+			memmove(&macl, namevalue+namelen, valuelen);
 			valuep = &macl;
 		} else
 			valuep = value;
@@ -358,7 +358,7 @@
 		}
 		ASSERT(mp->m_sb.sb_blocksize == XFS_BUF_COUNT(bp));
 		length = MIN(XFS_BUF_COUNT(bp), valuelen - amountdone);
-		bcopy(XFS_BUF_PTR(bp), value, length);
+		memmove(value, XFS_BUF_PTR(bp), length);
 		amountdone += length;
 		value += length;
 		i++;
diff -uNr xfsprogs-2.9.4.org/repair/dinode.c xfsprogs-2.9.4/repair/dinode.c
--- xfsprogs-2.9.4.org/repair/dinode.c	2007-09-11 04:01:20.000000000 +0200
+++ xfsprogs-2.9.4/repair/dinode.c	2009-05-19 18:57:17.000000000 +0200
@@ -1596,8 +1596,8 @@
 		 * local symlink, just copy the symlink out of the
 		 * inode into the data area
 		 */
-		bcopy((char *)XFS_DFORK_DPTR(dino),
-			symlink, INT_GET(dinoc->di_size, ARCH_CONVERT));
+		memmove(symlink, (char *)XFS_DFORK_DPTR(dino),
+			INT_GET(dinoc->di_size, ARCH_CONVERT));
 	} else {
 		/*
 		 * stored in a meta-data file, have to bmap one block
@@ -1622,7 +1622,7 @@
 			buf_data = (char *)XFS_BUF_PTR(bp);
 			size = MIN(INT_GET(dinoc->di_size, ARCH_CONVERT)
 				- amountdone, (int)XFS_FSB_TO_BB(mp, 1)*BBSIZE);
-			bcopy(buf_data, cptr, size);
+			memmove(cptr, buf_data, size);
 			cptr += size;
 			amountdone += size;
 			i++;
diff -uNr xfsprogs-2.9.4.org/repair/dir2.c xfsprogs-2.9.4/repair/dir2.c
--- xfsprogs-2.9.4.org/repair/dir2.c	2007-09-11 04:01:20.000000000 +0200
+++ xfsprogs-2.9.4/repair/dir2.c	2009-05-19 18:58:16.000000000 +0200
@@ -143,7 +143,7 @@
 		}
 		for (i = off = 0; i < nex; i++, off += XFS_BUF_COUNT(bp)) {
 			bp = bplist[i];
-			bcopy(XFS_BUF_PTR(bp), (char *)dabuf->data + off,
+			memmove((char *)dabuf->data + off, XFS_BUF_PTR(bp),
 				XFS_BUF_COUNT(bp));
 		}
 	}
@@ -170,7 +170,7 @@
 		dabuf->dirty = 0;
 		for (i=off=0; i < dabuf->nbuf; i++, off += XFS_BUF_COUNT(bp)) {
 			bp = dabuf->bps[i];
-			bcopy((char *)dabuf->data + off, XFS_BUF_PTR(bp),
+			memmove(XFS_BUF_PTR(bp), (char *)dabuf->data + off,
 				XFS_BUF_COUNT(bp));
 		}
 	}
@@ -208,10 +208,10 @@
 			do_error(_("couldn't malloc dir2 buffer list\n"));
 			exit(1);
 		}
-		bcopy(dabuf->bps, bplist, nbuf * sizeof(*bplist));
+		memmove(bplist, dabuf->bps, nbuf * sizeof(*bplist));
 		for (i = off = 0; i < nbuf; i++, off += XFS_BUF_COUNT(bp)) {
 			bp = bplist[i];
-			bcopy((char *)dabuf->data + off, XFS_BUF_PTR(bp),
+			memmove(XFS_BUF_PTR(bp), (char *)dabuf->data + off,
 				XFS_BUF_COUNT(bp));
 		}
 	}
@@ -244,7 +244,7 @@
 			do_error(_("couldn't malloc dir2 buffer list\n"));
 			exit(1);
 		}
-		bcopy(dabuf->bps, bplist, nbuf * sizeof(*bplist));
+		memmove(bplist, dabuf->bps, nbuf * sizeof(*bplist));
 	}
 	da_buf_done(dabuf);
 	for (i = 0; i < nbuf; i++) {
@@ -1101,7 +1101,7 @@
 		 * happened.
 		 */
 		if (junkit)  {
-			bcopy(sfep->name, name, namelen);
+			memmove(name, sfep->name, namelen);
 			name[namelen] = '\0';
 
 			if (!no_modify)  {
diff -uNr xfsprogs-2.9.4.org/repair/dir.c xfsprogs-2.9.4/repair/dir.c
--- xfsprogs-2.9.4.org/repair/dir.c	2007-09-11 04:01:20.000000000 +0200
+++ xfsprogs-2.9.4/repair/dir.c	2009-05-19 18:55:47.000000000 +0200
@@ -334,7 +334,7 @@
 		 * happened.
 		 */
 		if (junkit)  {
-			bcopy(sf_entry->name, name, namelen);
+			memmove(name, sf_entry->name, namelen);
 			name[namelen] = '\0';
 
 			if (!no_modify)  {
@@ -2099,7 +2099,7 @@
 		 * making it impossible for the stored length
 		 * value to be out of range.
 		 */
-		bcopy(namest->name, fname, entry->namelen);
+		memmove(fname, namest->name, entry->namelen);
 		fname[entry->namelen] = '\0';
 		hashval = libxfs_da_hashname((uchar_t *) fname, entry->namelen);
 
@@ -2485,7 +2485,7 @@
 			/*
 			 * copy leaf block header
 			 */
-			bcopy(&leaf->hdr, &new_leaf->hdr,
+			memmove(&new_leaf->hdr, &leaf->hdr,
 				sizeof(xfs_dir_leaf_hdr_t));
 
 			/*
@@ -2531,8 +2531,8 @@
 				d_entry->namelen = s_entry->namelen;
 				d_entry->pad2 = 0;
 
-				bcopy((char *) leaf + INT_GET(s_entry->nameidx, ARCH_CONVERT),
-					first_byte, bytes);
+				memmove(first_byte, (char *) leaf + INT_GET(s_entry->nameidx, ARCH_CONVERT),
+					bytes);
 
 				num_entries++;
 				d_entry++;
@@ -2580,7 +2580,7 @@
 			/*
 			 * final step, copy block back
 			 */
-			bcopy(new_leaf, leaf, mp->m_sb.sb_blocksize);
+			memmove(leaf, new_leaf, mp->m_sb.sb_blocksize);
 
 			*buf_dirty = 1;
 		} else  {
diff -uNr xfsprogs-2.9.4.org/repair/incore_ino.c xfsprogs-2.9.4/repair/incore_ino.c
--- xfsprogs-2.9.4.org/repair/incore_ino.c	2007-09-11 04:01:20.000000000 +0200
+++ xfsprogs-2.9.4/repair/incore_ino.c	2009-05-19 18:58:43.000000000 +0200
@@ -690,12 +690,11 @@
 	if (!tmp)
 		do_error(_("couldn't memalign pentries table\n"));
 
-	(void) bcopy(irec->ino_un.plist->pentries, tmp,
+	(void) memmove(tmp, irec->ino_un.plist->pentries,
 			target * sizeof(parent_entry_t));
 
 	if (cnt > target)
-		(void) bcopy(irec->ino_un.plist->pentries + target,
-				tmp + target + 1,
+		(void) memmove(tmp + target + 1, irec->ino_un.plist->pentries + target,
 				(cnt - target) * sizeof(parent_entry_t));
 
 	free(irec->ino_un.plist->pentries);
diff -uNr xfsprogs-2.9.4.org/repair/phase6.c xfsprogs-2.9.4/repair/phase6.c
--- xfsprogs-2.9.4.org/repair/phase6.c	2007-09-11 04:01:21.000000000 +0200
+++ xfsprogs-2.9.4/repair/phase6.c	2009-05-19 18:56:51.000000000 +0200
@@ -550,7 +550,7 @@
 			return(1);
 		}
 
-		bcopy(bmp, XFS_BUF_PTR(bp), mp->m_sb.sb_blocksize);
+		memmove(XFS_BUF_PTR(bp), bmp, mp->m_sb.sb_blocksize);
 
 		libxfs_trans_log_buf(tp, bp, 0, mp->m_sb.sb_blocksize - 1);
 
@@ -619,7 +619,7 @@
 			return(1);
 		}
 
-		bcopy(smp, XFS_BUF_PTR(bp), mp->m_sb.sb_blocksize);
+		memmove(XFS_BUF_PTR(bp), smp, mp->m_sb.sb_blocksize);
 
 		libxfs_trans_log_buf(tp, bp, 0, mp->m_sb.sb_blocksize - 1);
 
@@ -1361,7 +1361,7 @@
 	/*
 	 * snag the info we need out of the directory then release all buffers
 	 */
-	bcopy(namest->name, fname, entry->namelen);
+	memmove(fname, namest->name, entry->namelen);
 	fname[entry->namelen] = '\0';
 	*hashval = INT_GET(entry->hashval, ARCH_CONVERT);
 	namelen = entry->namelen;
@@ -1490,7 +1490,7 @@
 		junkit = 0;
 
 		XFS_DIR_SF_GET_DIRINO(&namest->inumber, &lino);
-		bcopy(namest->name, fname, entry->namelen);
+		memmove(fname, namest->name, entry->namelen);
 		fname[entry->namelen] = '\0';
 
 		ASSERT(lino != NULLFSINO);
@@ -2194,7 +2194,7 @@
 			continue;
 		}
 
-		bcopy(dep->name, fname, dep->namelen);
+		memmove(fname, dep->name, dep->namelen);
 		fname[dep->namelen] = '\0';
 		ASSERT(inum != NULLFSINO);
 
@@ -2783,7 +2783,7 @@
 			}
 		}
 
-		bcopy(sf_entry->name, fname, sf_entry->namelen);
+		memmove(fname, sf_entry->name, sf_entry->namelen);
 		fname[sf_entry->namelen] = '\0';
 
 		ASSERT(no_modify || lino != NULLFSINO);
@@ -2993,7 +2993,7 @@
 
 		XFS_DIR_SF_GET_DIRINO(&sf_entry->inumber, &lino);
 
-		bcopy(sf_entry->name, fname, sf_entry->namelen);
+		memmove(fname, sf_entry->name, sf_entry->namelen);
 		fname[sf_entry->namelen] = '\0';
 
 		if (sf_entry->name[0] == '/')  {
@@ -3164,7 +3164,7 @@
 			}
 		}
 
-		bcopy(sfep->name, fname, sfep->namelen);
+		memmove(fname, sfep->name, sfep->namelen);
 		fname[sfep->namelen] = '\0';
 
 		ASSERT(no_modify || (lino != NULLFSINO && lino != 0));
diff -uNr xfsprogs-2.9.4.org/repair/rt.c xfsprogs-2.9.4/repair/rt.c
--- xfsprogs-2.9.4.org/repair/rt.c	2007-09-11 04:01:21.000000000 +0200
+++ xfsprogs-2.9.4/repair/rt.c	2009-05-19 18:54:26.000000000 +0200
@@ -275,7 +275,7 @@
 			continue;
 		}
 		bytes = bp->b_un.b_addr;
-		bcopy(bytes, (char *)sumfile + sumbno * mp->m_sb.sb_blocksize,
+		memmove((char *)sumfile + sumbno * mp->m_sb.sb_blocksize, bytes,
 			mp->m_sb.sb_blocksize);
 		libxfs_putbuf(bp);
 	}
diff -uNr xfsprogs-2.9.4.org/repair/sb.c xfsprogs-2.9.4/repair/sb.c
--- xfsprogs-2.9.4.org/repair/sb.c	2007-09-11 04:01:21.000000000 +0200
+++ xfsprogs-2.9.4/repair/sb.c	2009-05-19 18:54:11.000000000 +0200
@@ -145,7 +145,7 @@
 			 * found one.  now verify it by looking
 			 * for other secondaries.
 			 */
-			bcopy(&bufsb, rsb, sizeof(xfs_sb_t));
+			memmove(rsb, &bufsb, sizeof(xfs_sb_t));
 			rsb->sb_inprogress = 0;
 			clear_sunit = 1;
 

diff -Naur curl-7.9.1.orig/curl-config.in curl-7.9.1/curl-config.in
--- curl-7.9.1.orig/curl-config.in	Thu Aug 16 15:09:20 2001
+++ curl-7.9.1/curl-config.in	Thu Sep 19 00:24:42 2002
@@ -73,7 +73,6 @@
 	;;
 
     --cflags)
-       	echo -I@includedir@
        	;;
 
     --libs)
--- curl-7.9.1.orig/lib/mprintf.c	2007-09-24 14:47:39.000000000 +0200
+++ curl-7.9.1/lib/mprintf.c	2007-09-24 14:47:46.000000000 +0200
@@ -1100,7 +1100,7 @@
 }
 
 #ifndef WIN32 /* not needed on win32 */
-extern int fputc(int, FILE *);
+//extern int fputc(int, FILE *);
 #endif
 
 int curl_mprintf(const char *format, ...)
diff -uNr curl-7.10.1.org/configure curl-7.10.1/configure
--- curl-7.10.1.org/configure	2002-10-11 14:58:39.000000000 +0200
+++ curl-7.10.1/configure	2008-10-09 18:19:35.000000000 +0200
@@ -3796,7 +3796,7 @@
   ;;
 
 # This must be Linux ELF.
-linux-gnu*)
+linux*)
   case $host_cpu in
   alpha* | hppa* | i*86 | powerpc* | sparc* | ia64* )
     lt_cv_deplibs_check_method=pass_all ;;
@@ -6380,7 +6380,7 @@
   ;;
 
 # This must be Linux ELF.
-linux-gnu*)
+linux*)
   version_type=linux
   need_lib_prefix=no
   need_version=no
diff -uNr curl-7.10.1.org/include/curl/curl.h curl-7.10.1/include/curl/curl.h
--- curl-7.10.1.org/include/curl/curl.h	2002-10-11 15:18:13.000000000 +0200
+++ curl-7.10.1/include/curl/curl.h	2009-03-06 08:47:55.000000000 +0100
@@ -222,6 +222,18 @@
 
 #define CURL_ERROR_SIZE 256
 
+/* CURLPROTO_ defines are for the CURLOPT_*PROTOCOLS options */
+#define CURLPROTO_HTTP   (1<<0)
+#define CURLPROTO_HTTPS  (1<<1)
+#define CURLPROTO_FTP    (1<<2)
+#define CURLPROTO_FTPS   (1<<3)
+#define CURLPROTO_TELNET (1<<6)
+#define CURLPROTO_LDAP   (1<<7)
+#define CURLPROTO_LDAPS  (1<<8)
+#define CURLPROTO_DICT   (1<<9)
+#define CURLPROTO_FILE   (1<<10)
+#define CURLPROTO_ALL    (~0) /* enable everything */
+
 /* long may be 32 or 64 bits, but we should never depend on anything else
    but 32 */
 #define CURLOPTTYPE_LONG          0
@@ -600,6 +612,18 @@
   CINIT(ENCODING, OBJECTPOINT, 102),
  
 
+  /* set the bitmask for the protocols that are allowed to be used for the
+     transfer, which thus helps the app which takes URLs from users or other
+     external inputs and want to restrict what protocol(s) to deal
+     with. Defaults to CURLPROTO_ALL. */
+  CINIT(PROTOCOLS, LONG, 181),
+
+  /* set the bitmask for the protocols that libcurl is allowed to follow to,
+     as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
+     to be set in both bitmasks to be allowed to get redirected to. Defaults
+     to CURLPROTO_ALL & ~CURLPROTO_FILE. */
+  CINIT(REDIR_PROTOCOLS, LONG, 182),
+
   CURLOPT_LASTENTRY /* the last unused */
 } CURLoption;
 
diff -uNr curl-7.10.1.org/lib/url.c curl-7.10.1/lib/url.c
--- curl-7.10.1.org/lib/url.c	2002-10-11 14:57:09.000000000 +0200
+++ curl-7.10.1/lib/url.c	2009-03-06 08:47:55.000000000 +0100
@@ -285,6 +285,13 @@
   
   data->set.proxytype = CURLPROXY_HTTP; /* defaults to HTTP proxy */
 
+  /* for the *protocols fields we don't use the CURLPROTO_ALL convenience
+     define since we internally only use the lower 16 bits for the passed
+     in bitmask to not conflict with the private bits */
+  data->set.allowed_protocols = PROT_EXTMASK | PROT_GOPHER;
+  data->set.redir_protocols =
+    (PROT_EXTMASK & ~CURLPROTO_FILE) | PROT_GOPHER; /* not FILE */
+
   /* create an array with connection data struct pointers */
   data->state.numconnects = 5; /* hard-coded right now */
   data->state.connects = (struct connectdata **)
@@ -1083,6 +1090,22 @@
     data->set.proxytype = va_arg(param, long);
     break;
 
+  case CURLOPT_PROTOCOLS:
+    /* set the bitmask for the protocols that are allowed to be used for the
+       transfer, which thus helps the app which takes URLs from users or other
+       external inputs and want to restrict what protocol(s) to deal
+       with. Defaults to CURLPROTO_ALL. */
+    data->set.allowed_protocols = va_arg(param, long) & PROT_EXTMASK;
+    break;
+
+  case CURLOPT_REDIR_PROTOCOLS:
+    /* set the bitmask for the protocols that libcurl is allowed to follow to,
+       as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs
+       to be set in both bitmasks to be allowed to get redirected to. Defaults
+       to CURLPROTO_ALL & ~CURLPROTO_FILE. */
+    data->set.redir_protocols = va_arg(param, long) & PROT_EXTMASK;
+    break;
+
   default:
     /* unknown tag and its companion, just ignore: */
     return CURLE_FAILED_INIT; /* correct this */
@@ -2262,8 +2285,6 @@
       result = Curl_Transfer(conn, -1, -1, FALSE, NULL, /* no download */
                              -1, NULL); /* no upload */
     }
-
-    return result;
 #else
     failf(data, LIBCURL_NAME
           " was built with FILE disabled!");
@@ -2275,6 +2296,18 @@
     failf(data, "Unsupported protocol: %s", conn->protostr);
     return CURLE_UNSUPPORTED_PROTOCOL;
   }
+  /* Protocol found. Check if allowed */
+  if(!(data->set.allowed_protocols & conn->protocol) ||
+    /* it is allowed for "normal" request, now do an extra check if this is
+       the result of a redirect */
+      (data->state.this_is_a_follow &&
+      !(data->set.redir_protocols & conn->protocol))) {
+    failf(data, "Unsupported protocol: %s", conn->protostr);
+    return CURLE_UNSUPPORTED_PROTOCOL;
+  }
+  if (conn->protocol & PROT_FILE)
+    return result;
+
 
   /*************************************************************
    * Figure out the remote port number
diff -uNr curl-7.10.1.org/lib/urldata.h curl-7.10.1/lib/urldata.h
--- curl-7.10.1.org/lib/urldata.h	2002-09-24 09:27:59.000000000 +0200
+++ curl-7.10.1/lib/urldata.h	2009-03-06 08:47:55.000000000 +0100
@@ -294,17 +294,27 @@
                        struct has */
 
   long protocol; /* PROT_* flags concerning the protocol set */
-#define PROT_MISSING (1<<0)
-#define PROT_GOPHER  (1<<1)
-#define PROT_HTTP    (1<<2)
-#define PROT_HTTPS   (1<<3)
-#define PROT_FTP     (1<<4)
-#define PROT_TELNET  (1<<5)
-#define PROT_DICT    (1<<6)
-#define PROT_LDAP    (1<<7)
-#define PROT_FILE    (1<<8)
-#define PROT_FTPS    (1<<9)
-#define PROT_SSL     (1<<10) /* protocol requires SSL */
+#define PROT_HTTP    CURLPROTO_HTTP
+#define PROT_HTTPS   CURLPROTO_HTTPS
+#define PROT_FTP     CURLPROTO_FTP
+#define PROT_TELNET  CURLPROTO_TELNET
+#define PROT_DICT    CURLPROTO_DICT
+#define PROT_LDAP    CURLPROTO_LDAP
+#define PROT_FILE    CURLPROTO_FILE
+#define PROT_FTPS    CURLPROTO_FTPS
+/* CURLPROTO_TFTP (1<<11) is currently the highest used bit in the public
+   bitmask. We make sure we use "private bits" above the first 16 to make
+   things easier. */
+
+#define PROT_EXTMASK 0xfff
+
+#define PROT_SSL     (1<<22) /* protocol requires SSL */
+#define PROT_MISSING (1<<23)
+/* CURLPROTO_GOPHER is not defined in the 7.19.4 headers, as gopher
+   support has been dropped long ago. Apps won't be able to explicitly
+   allow gopher, but that's probably not going to be an issue */
+#define PROT_GOPHER  (1<<24)
+
 
 #ifdef ENABLE_IPV6
   struct addrinfo *serv_addr;   /* the particular host we use */
@@ -703,6 +713,8 @@
   bool no_signal;        /* do not use any signal/alarm handler */
 
   bool global_dns_cache;
+  long allowed_protocols;
+  long redir_protocols;
 };
 
 /*

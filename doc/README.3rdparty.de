#
# $Id: README.3rdparty.de,v 1.5 2003/07/11 00:30:16 obi Exp $
#
# Copyright (c) 2002-2003 Andreas Oberritter <obi@tuxbox.org>
#
# Permission is granted to copy, distribute and/or modify this document
# under the terms of the GNU Free Documentation License, Version 1.2
# or any later version published by the Free Software Foundation;
# with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
# A copy of the license is included in cdk/common-licenses/FDL-1.2
# 
# Inhalt dieses Dokuments sind die noetigen Schritte zum hinzufuegen
# von 3rd party programmen zum CDK.
#

Und so baut man neue Tools in das cdk ein:
------------------------------------------
Zunaechst macht man sich Gedanken darueber, ob das, was man einbauen will Sinn
macht. Wenn man meint, die Idee waere gut, dann kann man anfangen sie zu
integrieren.

Handelt es sich hierbei um eigene Software oder um bis zur unkenntlichkeit
veraenderte Software, so ist das hier nicht das passende Dokument.
Handelt es sich hingegen um veraenderte Software anderer Leute, so nehme man den
unveraenderten Quellcode und erstelle dazu ein passendes Patch. Das geht mit
dem Kommando "diff -Naur paket.orig paket > paket.diff". Der erstellte Patch
gehoert in das Verzeichnis $HOME/tuxbox-cvs/cdk/Patches. Es werden keine
Versionsinformationen an den Dateinamen angehaengt.

Was nun noch fehlt sind ein paar Eintraege in folgenden Dateien:
$HOME/tuxbox-cvs/cdk/Makefile.am
$HOME/tuxbox-cvs/cdk/configure.ac
$HOME/tuxbox-cvs/cdk/rules-archive
$HOME/tuxbox-cvs/cdk/rules-make
$HOME/tuxbox-cvs/cdk/rules-install

Beginnen wir mit rules-archive:
-------------------------------
Hier gehoert genau eine Zeile pro Paket hinein, und zwar der Name des Archivs,
sowie eine oder mehrere http- oder ftp-Adressen, von denen das Archiv direkt
geladen werden kann. Diese werden mit Semikolon voneinander getrennt.

z.B.
paket-1.0.tar.gz;http://www.pakethome.de/download

Als naechstes zu rules-make:
----------------------------
Wieder braucht man eine Zeile pro Paket. Und wieder werden die Eintraege mit
Semikolon getrennt. Diesmal sind es allerdings ein paar mehr und zwar die
Folgenden:

 - Bezeichner fuer die Software
 - Versionsnummer der Software
 - Verzeichnisname nach dem entpacken der Software
 - Archivname und Name eventueller Patches (durch Doppelpunkt getrennt)
 - Eine oder mehrere Regeln zum Bearbeiten des Archivs und vorhandender Patches

Der Bezeichner wird wieder in rules-install, configure.ac und Makefile.am zum
Einsatz kommen. Er ist prinzipiell frei waehlbar, sollte aber dennoch moeglichst
viel mit dem Paketnamen gemeinsam haben.

Was mit Versionsnummer gemeint ist sollte jedem klar sein.

Der darauf folgende Verzeichnisname muss dem Pfad entsprechen, der in dem zu
entpackenden Archiv gespeichert ist. Ist kein Pfad gespeichert, so muss man
einen Pfad moeglichst sinnvoll waehlen und spaeter bei den Regeln anstatt
extract dirextract verwenden.

Archivname sollte auch klar sein. Falls zusaetzliche Dateien existieren, die
fuer das Paket benutzt werden, seien es diffs oder zusaetzliche Archive, so
gibt man deren Namen ohne Verzeichnis und durch Doppelpunkt getrennt an.

Zu guter letzt traegt man die Regeln ein, nach denen mit dem Archiv und seinen
Patches verfahren werden soll:
extract    - extrahiert ein Paket
dirextract - extrahiert ein Paket in das angegebene Verzeichnis
patch      - patcht eine diff Datei in ein extrahiertes Paket

Fuer weitere Regeln kann man einen Blick in die Datei rules-make werfen.

z.B. sieht das dann so aus;
paket;1.0;paket-1.0;paket-1.0.tar.gz;extract:paket-1.0.tar.gz

oder falls ein patch vorhanden ist:
paket;1.0;paket-1.0;paket-1.0.tar.gz:paket.diff;extract:paket-1.0.tar.gz;patch:paket.diff

rules-install ist wieder kuerzer:
---------------------------------
Falls die Installation von Hand im Makefile.am geregelt wird, reicht es, hier
den Bezeichner in eine eigene Zeile zu schreiben. Ansonsten nimmt man in der
Regel folgenden Eintrag:

paket;make:install:DESTDIR=TARGET

Es koennen mehrere Befehle angegeben werden, diese sind per Semikolon von
einander zu trennen. Befehle und zugehoerige Parameter werden durch Doppelpunkt
getrennt.
DESTDIR=TARGET wird benutzt, um make den Pfad des cdkroots mitzuteilen. Einige Pakete
benutzen davon abweichende Variablennamen oder koennen ausschliesslich ueber --prefix
zur configure-zeit den Zielpfad mitgeteilt bekommen.

configure.ac:
-------------
Hier sucht man sich die passende Sektion in der Datei aus (an den vorhandenen
Eintraegen orientieren) und fuegt dort entweder TUXBOX_RULES_MAKE(...) oder
TUXBOX_RULES_MAKE_EXDIR(...) ein. Anstatt der Punkte benutzt man den in
rules-make gewaehlten Bezeichner.

Beispiel:
TUXBOX_RULES_MAKE(paket)
erstellt Variablen, aus den Daten in rules-install, rules-make und
rules-install, die in Makefile.am benutzt werden koennen. Es werden die
folgenden Variablen definiert:
DEPENDS_paket - benoetigte Archive und Patches
PREPARE_paket - Kommandos zum extrahieren und patchen des Paketes
DIR_paket     - Name des Verzeichnisses, in das entpackt wurde
INSTALL_paket - Installationsbefehle
CLEANUP_paket - Befehle zum Entfernen von Dateien nach Bau und Installation

TUXBOX_RULES_MAKE_EXDIR(paket)
tut prinzipiell dasselbe, hat jedoch den Unterschied, dass es fuer Pakete
benutzt wird, bei denen das Bauen nicht im Quellverzeichnis selbst passieren
soll. Zusaetzlich wird die folgende Variable definiert:
CONFIGURE_paket - Aufruf des Konfiurationsskriptes des Paketes

Makefile.am:
------------
Wer Makefiles kennt, der hat es leicht. Diese Datei ist sozusagen der Rohbau
des Makefiles und unterscheidet sich nur durch die Variablen, die durch den
Aufruf von configure ersetzt und in ein Makefile geschrieben werden.

Regeln, die zu einem Paket gehoeren, Werden wie der oben gewaehlte Bezeichner
mit einem Punkt vorangestellt genannt.

Am Ende jeder Regel steht "touch $@". Dieser Befehl erstellt eine Datei mit
dem Namen der aktuellen Regel. Dadurch wird gekennzeichnet, dass eine Regel
vollstaendig durchlaufen wurde.

Beispiel fuer eine Regel:

.paket: .bootstrap @DEPENDS_paket@
	@PREPARE_paket@
	cd @DIR_paket@ && \
		$(BUILDENV) \
		./configure \
			--build=$(build) \
			--host=$(target) \
			--prefix= && \
		$(MAKE) all && \
		@INSTALL_paket@
	@CLEANUP_paket@
	touch $@

$(BUILDENV) ist ein Makro, das eine Menge an oft gebrauchten Umgebungsvariablen
enthaelt, wie z.b. CC, CFLAGS usw.
Ab und zu kann es vorkommen, dass ein Paket andere oder zusaetzliche Variablen
braucht. Diese koennen unterhalb von $(BUILDENV) angegeben werden. Beispiele
dazu findet man im Makefile.am.

Weiterhin gibt es in Makefile.am Regeln, die verschiedene Regeln gruppieren
und letztendlich zu einer globalen Regel ("all") zusammengefasst werden.
Dort, wo das hinzugefuegte Paket kategorisch am besten einzuordnen ist, fuegt
man den Eintrag hinzu, z.B.

devel = .gdb .strace .paket

Am Ende der Datei ist dir Regel zum Saeubern der Umgebung zu finden. Auch
hier muss man an geeigneter Stelle den Regelnamen auffuehren, so dass die
Markierung, die nach erfolgreichem bauen angelegt wurde, entfernt werden
kann.


#
# $Id: readme.squashfs,v 1.2 2004/02/23 11:08:49 lucgas Exp $
#
# This document describes the steps needed to set up a squashfs 
# system(mix) for your dbox2
# Permission is granted to copy, distribute and/or modify this document
# under the terms of the GNU Free Documentation License, Version 1.2
# or any later version published by the Free Software Foundation;
# with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
# A copy of the license is included in cdk/common-licenses/FDL-1.2
#
# This document is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#

What is squashfs:

Squashfs is a compressed read-only filesystem for Linux. Squashfs is intended for general read-only filesystem use, for archival use (i.e. in cases where a .tar.gz file may be used), and in constrained block device/memory systems (e.g. embedded systems) where low overhead is needed. The filesystem is currently stable, and has been tested on PowerPC, i586, Sparc and ARM architectures.
Squashfs overview

    * Data, inodes and directories are compressed.
    * Squashfs stores full uid/gids (32 bits), and file creation time.
    * Files up to 2^32 bytes are supported. Filesystems can be up to 2^32 bytes.
    * Inode and directory data are highly compacted, and packed on byte boundaries. Each compressed inode is on average 8 bytes in length (the exact length varies on file type, i.e. regular file, directory, symbolic link, and block/char device inodes have different sizes).
    * Squashfs can use block sizes up to 32K (the default size is 32K). Using 32K blocks achieves greater compression ratios than the normal 4K block size.
    * File duplicates are detected and removed.
    * Both big and little endian architectures are supported. The mksquashfs program can generate filesystems for different endian architectures for cases where the host byte ordering is different to the target. This is useful for embedded systems. 

You need just to replace the files what you in this dir found with the 
original one.

dbox2-flash.c in linux/drivers/mtd/maps
dbox2.h in boot/u-boot/include/configs
You need to have your logos in jffs2 because u-boot is to stupid 
to know what squashfs is.Compile your own u-boot,flfs,kernel and make
your Image ready to go.Bevor you create your image change your flashmanage.pl 
like this:
my %partdef = 
( 
	0 => [ "ppcboot", 0, 0x20000 ], 
	1 => [ "cramfs", 0x20000, 0x0a0000 ], 
	2 => [ "root",  0x0c0000, 0x560000],
	3 => [ "jffs2",  0x620000, 0x1c0000],
); 

Now create your Image and have fun:

./mkcramfs -n "0106220222004" cramfs cramfs.img

mkfs.jffs2 -b -e 131072 -p -o jffs2.img -r /jffs2/

mksquashfs root squashfs.img -be

./flashmanage.pl -i finalimage.img -o build --part ppcboot=squashed-flfs.img --part cramfs=cramfs.img --part root=squashfs.img --part jffs2=jffs2.img

Big thx an mixvt for his help and support!

# Author/Copyright: Barf 2005-07-20
# License: Gnu Free Documentation License 
# http://www.gnu.org/licenses/licenses.html#FDL

Prerequisites:
The exact prerequistes are listed in the file INSTALL.en.

Please note: To build a Tuxbox image, some additional tools are
required. Some, but not necessarily all, of these tools are provided
by Linux distributers such as SuSE, Redhat, or Debian. However, the
developers of the Tuxbox do not feel constrained to use only the tools
your favorite Linux distributor distributes. You should therefore
check for the existense (and usability) of the tools individually, and
not assume that your "recent" Linux "must" work (just because it is
"recent"). However, if you have difficulties or questions that are not
answered by FAQs or wiki, feel free to ask the forum.

After you have completed step 3, the command "make toolcheck" can be
used to get a list of the versions of your version of the required tools.

1. Check out the sources. This is described in many places (wiki and
   INSTALL.en). In short, select a place (with lots of
   free diskspace) to keep the sources. We call this $CVSDIR. cd to
   $CVSDIR. Commands are:

export CVS_RSH=ssh
cvs -d anoncvs@cvs.tuxbox.org:/cvs/tuxbox -z3 co -P .

(last command ends with a period, that is part of the command.)

2. Generate some bootstrap files:

cd cdk
./autogen.sh

There may be some warnings on underquoted definitions. These can be
ignored.

3. "Configure" the source tree. Select a place to build the images,
   call it $PREFIX. cd to $CVSDIR/cdk.

./configure --prefix=$PREFIX --with-cvsdir=$CVSDIR --disable-libcrypto --enable-maintainer-mode --with-targetruleset=flash

Examine the output for warnings and errors. Missing fakeroot may me
ok, missing mkcramfs (mksquashfs) is ok if you do not intend to build
cramfs (squashfs)-images. Either mkjffs2 or mkfs.jffs2 is needed, not
both. The warning about mklibs can be ignored. Other warnings should
probably not be ignored.

(--with-toolset=flash is used to build images, instead of network
installations (so-called yadds). --enable-maintainer-mode should "by
definition" only be used by maintainers, however, it is always
suggested, and no-one have ever tried without. --disable-libcrypto
inhibits combilation a normally unneeded library.)

4. (Optional) Create a directory §CVSDIR/cdk/defaultlogos and put
   bootlogos logo-fb and logo-lcd there. The requirements for these
   are described elsewhere. To make things simple, just "steal"
   them. If they are missing, the image will still boot, but will look
   more mundane.

5. Build your desired image with a command like "make
   flash-$gui-$filesystem-$chips" where $gui is neutrino or enigma,
   $filesystem is jffs2fs, cramfs, or squashfs, and $chips is 1x or
   2x, depending on the number of flash chips in your dBox. For
   example, "make neutrino-jffs2fs-2x" is my favorite. You can also
   substitute "all" for $gui, $filesystem, or $chips. For example,
   "make neutrino-all-2x" creates three images, all with neutrino, for
   dBoxes with two flashchips, but with three different root file
   system.

6. Wait for the build to finish. On my Athlon XP 1800, make
   flash-all-all-all takes around one and a half hour. Assuming that
   the build suceeded (and the final check did not rename it it a
   *.bad image) the just-built image can now be flashed as complete
   image. How to do this is outside the scope of the current document.

Customization:

The thus generated image should be directly flashable. The necessary
modifications for the user to get a running system is to upload
u-codes, entering configuration parameters (in particular the network
parameters), and initiating the first channel scan. However, in two
situations it is desirable to customize the image building process:

1. Your images should contain some other "cool" stuff, like plugins. 
2. You are building images for yourself, in which case putting ucodes,
configuration files (like neutrino.conf) and possibly modified channel
lists (services.xml, myservices.xml, bouquets.xml) directly saves
time.

To make this possible (in a clean way), the Makefile calls
user-written modification scripts (if existing and executable) in
certain situations. (Exactle when MAY be described by a future,
extended, version of this document. For now, look for
@TUXBOX_CUSTOMIZE@ in Makefile.am) For example, to make modifications
in the root partition of a neutrino-squashfs image, you can write a
script called $CVSROOT/cdk/root-neutrino-squashfs-local.sh, and make
it executable. This script is supposed to make the required
modifications. The scripts are given two arguments, first one ($1 in
the script) is $flashprefix (in the sense of the Makefile), and the
second argument ($2 in the script) is buildprefix (in the sense of the
Makefile). For example, here is a sensible var-neutrino-local.sh
script that basically does what 2. above described:

	#!/bin/sh

	flashprefix=$1
	buildprefix=$2
	myfiles=$HOME/dbox/myfiles

	echo Hello, this is $0, flashprefix=$1 and buildprefix=$2
	newvar=$flashprefix/var-neutrino

	set -x
	cp -f $myfiles/var/tuxbox/config/zapit/services.xml $newvar/tuxbox/config/zapit
	cp -f $myfiles/var/tuxbox/config/zapit/bouquets.xml $newvar/tuxbox/config/zapit
	cp -f $myfiles/var/tuxbox/config/zapit/zapit.conf   $newvar/tuxbox/config/zapit
	cp -f $myfiles/var/tuxbox/config/neutrino.conf      $newvar/tuxbox/config

The Makefile(.am) also contains some targets (like
$(flashprefix)/root/bin/ssh) that are not necessarily used by normal
image builds. These can be used either from customization files, or
interactivelly, to install components that would not otherwise be installed.
